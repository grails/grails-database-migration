buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:4.0.3"
    }
}

version project.projectVersion
group "org.grails.plugins"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"java-library"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.internal.grails-plugin-publish"
apply plugin:"org.grails.grails-gsp"
apply plugin: "org.asciidoctor.jvm.convert"

repositories {
    maven { url "https://repo.grails.org/grails/core" }
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

configurations {
    documentation

    configureEach {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if ((details.requested.group == 'org.codehaus.groovy' || details.requested.group == 'org.apache.groovy') && details.requested.name != 'groovy-bom') {
                details.useTarget(group: 'org.apache.groovy', name: details.requested.name, version: "$groovyVersion")
                details.because "The dependency coordinates are changed in Apache Groovy 4, plus ensure version"
            }

            if (details.requested.group == "io.micronaut" && details.requested.name == "micronaut-inject-groovy") {
                details.useVersion("4.6.1")
            }
        }
    }
}

dependencies {
    api "org.liquibase:liquibase-core:$liquibaseHibernate5Version"

    api("org.liquibase.ext:liquibase-hibernate5:$liquibaseHibernate5Version") {
        exclude group: 'org.hibernate', module: 'hibernate-core'
        exclude group: 'org.hibernate', module: 'hibernate-entitymanager'
        exclude group: 'org.hibernate', module: 'hibernate-envers'
        exclude group: 'org.liquibase', module: 'liquibase-core'
        exclude group: 'org.liquibase', module: 'liquibase-test-harness'
        exclude group: 'com.h2database', module: 'h2'
    }
    api "jakarta.annotation:jakarta.annotation-api:$jakartaAnnotationApiVersion"
    api 'org.apache.commons:commons-lang3:3.17.0'

    compileOnly "org.hibernate:hibernate-core-jakarta:$hibernate5Version"

    compileOnly "org.springframework.boot:spring-boot-starter-logging"
    compileOnly "org.springframework.boot:spring-boot-starter-actuator"
    compileOnly "org.springframework.boot:spring-boot-autoconfigure"
    compileOnly "org.springframework.boot:spring-boot-starter-tomcat"

    compileOnly "org.grails:grails-web-boot"
    compileOnly "org.grails:grails-dependencies"
    compileOnly "jakarta.servlet:jakarta.servlet-api:$servletApiVersion"
    compileOnly "org.grails.plugins:hibernate5:$gormVersion"
    testImplementation "io.micronaut:micronaut-inject-groovy:$micronautVersion"
    testImplementation "io.micronaut:micronaut-inject:$micronautVersion"
    testImplementation "org.liquibase.ext:liquibase-hibernate5:$liquibaseHibernate5Version"
    testImplementation "org.liquibase:liquibase-core:$liquibaseHibernate5Version"


    testImplementation "org.springframework.boot:spring-boot-starter-tomcat"
    testImplementation "org.hibernate:hibernate-core-jakarta:$hibernate5Version"
    testImplementation "org.grails.plugins:hibernate5:$gormVersion"

    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "com.h2database:h2:$h2Version"


    documentation "org.apache.groovy:groovy:$groovyVersion"
    documentation "org.apache.groovy:groovy-ant:$groovyVersion"
    documentation "org.apache.groovy:groovy-templates:$groovyVersion"
    documentation "com.github.javaparser:javaparser-core:$javaParserCoreVersion"

}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

grailsPublish {
    userOrg = "grails"
    githubSlug = 'grails-plugins/grails-database-migration'
    license {
        name = 'Apache-2.0'
    }
    title = "Grails Database Migration Plugin"
    desc = "Grails Database Migration Plugin"
    developers = [kazukiyamamoto: "Kazuki YAMAMOTO"]
}

asciidoctor {
    baseDirFollowsSourceFile()
    outputDir = layout.buildDirectory.dir('asciidoc').get().getAsFile()

    resources {
        from('src/docs/images')
        into "./images"
    }

    attributes 'experimental'  : 'true',
            'compat-mode'   : 'true',
            'toc'           : 'left',
            'icons'         : 'font',
            'version'       : project.version,
            'groupId'       : project.group,
            'artifactId'    : project.name,
            'sourcedir'     : "${projectDir}/src/main/groovy",
            'liquibaseHibernate5Version': liquibaseHibernate5Version
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(Groovydoc) {
    configure {
        docTitle = "Grails Database Migration Plugin ${version}"
        source = project.files('src/main/groovy')
        destinationDir = layout.buildDirectory.dir('docs/api').get().getAsFile()
        classpath = configurations.documentation
        groovyClasspath = configurations.documentation
    }
}

task docs(type:Copy, group: 'documentation')  {
    dependsOn(groovydoc, asciidoctor)
    from "${project.layout.buildDirectory.get()}/asciidoc"
    into "${project.layout.buildDirectory.get()}/docs"
}

jar {
    exclude "testapp/**/**"
}

test {
    testLogging {
        events "passed", "skipped", "failed"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
    }
    retry {
        maxRetries = 2
        maxFailures = 20
        failOnPassedAfterRetry = true
        filter {
            excludeClasses.add("*GroovyChangeLogSpec")
        }
    }
}
